#!/bin/bash

# Script d'arr√™t coordonn√© de tous les services
# Arr√™te proprement le syst√®me principal + les nouveaux modules

echo "üõë Arr√™t coordonn√© de tous les services..."

# Fonction pour arr√™ter un service via son fichier PID
stop_service() {
    local name=$1
    local pid_file="/home/tims/Dev/Licenses_prod/logs/${name}.pid"
    
    if [ -f "$pid_file" ]; then
        local pid=$(cat "$pid_file")
        if ps -p $pid > /dev/null 2>&1; then
            echo "üîÑ Arr√™t de $name (PID: $pid)..."
            kill $pid
            sleep 2
            if ps -p $pid > /dev/null 2>&1; then
                echo "‚ö†Ô∏è  Arr√™t forc√© de $name..."
                kill -9 $pid
            fi
            rm -f "$pid_file"
            echo "‚úÖ $name arr√™t√©"
        else
            echo "‚ö†Ô∏è  $name n'√©tait pas en cours d'ex√©cution"
            rm -f "$pid_file"
        fi
    else
        echo "‚ÑπÔ∏è  Aucun fichier PID trouv√© pour $name"
    fi
}

# 1. Arr√™ter le syst√®me principal de gestion de licences
echo "1Ô∏è‚É£  Arr√™t du syst√®me principal de gestion de licences..."
if [ -f "/home/tims/Dev/Licenses_prod/stop.sh" ]; then
    cd /home/tims/Dev/Licenses_prod
    ./stop.sh
else
    echo "‚ö†Ô∏è  Script stop.sh principal introuvable"
    # Arr√™t manuel des services principaux
    stop_service "Backend API"
    stop_service "Admin Dashboard"
    stop_service "Frontend Client"
fi

# 2. Arr√™ter BackBPMF
echo ""
echo "2Ô∏è‚É£  Arr√™t de BackBPMF..."
stop_service "BackBPMF"

# 3. Arr√™ter FrontBPMF
echo ""
echo "3Ô∏è‚É£  Arr√™t de FrontBPMF..."
stop_service "FrontBPMF"

# 4. Arr√™ter Search Engine
echo ""
echo "4Ô∏è‚É£  Arr√™t du Search Engine..."
stop_service "SearchEngine"

# V√©rification finale - tuer tous les processus Node.js restants sur les ports connus
echo ""
echo "üîç V√©rification finale des processus..."

# Ports mis √† jour selon la configuration actuelle
ports=(3001 3000 3003 5173 5174 8080)
for port in "${ports[@]}"; do
    pid=$(lsof -ti:$port 2>/dev/null)
    if [ ! -z "$pid" ]; then
        echo "‚ö†Ô∏è  Processus restant sur le port $port (PID: $pid) - arr√™t forc√©"
        kill -9 $pid 2>/dev/null
        sleep 1
        # V√©rifier si le processus est vraiment arr√™t√©
        if lsof -ti:$port 2>/dev/null >/dev/null; then
            echo "‚ùå Impossible d'arr√™ter le processus sur le port $port"
        else
            echo "‚úÖ Processus sur le port $port arr√™t√© avec succ√®s"
        fi
    fi
done

# Nettoyer les fichiers PID orphelins
echo "üßπ Nettoyage des fichiers PID..."
rm -f /home/tims/Dev/Licenses_prod/logs/*.pid

# V√©rification finale de l'√©tat des ports
echo ""
echo "üìä V√âRIFICATION FINALE :"
echo "------------------------"

services=(
    "Backend API (Licences):3001"
    "Search Engine (IA):3000" 
    "BackBPMF (Documents DGI):3003"
    "Frontend Client (Interface):5173"
    "FrontBPMF (BPM):5174"
    "Admin Dashboard:8080"
)

all_stopped=true
for service in "${services[@]}"; do
    name=$(echo $service | cut -d: -f1)
    port=$(echo $service | cut -d: -f2)
    
    if netstat -tuln | grep -q ":$port "; then
        echo "‚ö†Ô∏è  $name - Toujours actif sur le port $port"
        all_stopped=false
    else
        echo "‚úÖ $name - Arr√™t√©"
    fi
done

echo ""
if [ "$all_stopped" = true ]; then
    echo "üéâ Tous les services ont √©t√© arr√™t√©s avec succ√®s !"
else
    echo "‚ö†Ô∏è  Certains services sont encore actifs. V√©rifiez manuellement avec :"
    echo "   netstat -tuln | grep -E ':(3001|3000|3003|5173|5174|8080) '"
    echo "   ps aux | grep node"
    echo ""
    echo "üîß Pour forcer l'arr√™t des services restants :"
    echo "   sudo lsof -ti:PORT | xargs kill -9  (remplacez PORT par le port)"
    echo "   ou relancez ce script : ./stop-all-services.sh"
fi

echo ""
echo "üìã SERVICES DISPONIBLES POUR RED√âMARRAGE :"
echo "  ./start-all-services.sh  - D√©marrer tous les services"
echo "  ./start.sh              - D√©marrer uniquement le syst√®me principal"
