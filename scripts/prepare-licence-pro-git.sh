#!/bin/bash

# Script de pr√©paration pour Git - Version Licence Pro
# Exclut les modules BPM et search engine

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

show_header() {
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë${WHITE}            üéì PR√âPARATION LICENCE PRO POUR GIT              ${CYAN}‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

check_git_status() {
    echo -e "${YELLOW}üîç V√©rification de l'√©tat Git...${NC}"
    
    cd "$PROJECT_ROOT"
    
    if [ ! -d ".git" ]; then
        echo -e "${BLUE}üìÅ Initialisation du repository Git...${NC}"
        git init
        echo -e "${GREEN}‚úÖ Repository Git initialis√©${NC}"
    else
        echo -e "${GREEN}‚úÖ Repository Git d√©tect√©${NC}"
    fi
    
    echo ""
}

show_excluded_content() {
    echo -e "${YELLOW}üö´ Contenu EXCLU du repository (selon .gitignore) :${NC}"
    echo ""
    
    echo -e "${RED}üìÅ Modules exclus :${NC}"
    echo -e "  üî¥ FrontBPMF/ (Interface BPM Frontend)"
    echo -e "  üî¥ BackBPMF/ (Interface BPM Backend)" 
    echo -e "  üî¥ search-engine/ (Moteur de recherche)"
    
    echo ""
    echo -e "${RED}üìñ Documentation exclue :${NC}"
    echo -e "  üî¥ docs/frontbpmf/"
    echo -e "  üî¥ docs/backbpmf/"
    echo -e "  üî¥ docs/search-engine/"
    
    echo ""
    echo -e "${RED}üîß Scripts exclus :${NC}"
    echo -e "  üî¥ scripts/frontbpmf/"
    
    echo ""
}

show_included_content() {
    echo -e "${YELLOW}‚úÖ Contenu INCLUS dans le repository :${NC}"
    echo ""
    
    echo -e "${GREEN}üé® Frontend & Interface :${NC}"
    echo -e "  ‚úÖ frontend/ (Interface client React)"
    echo -e "  ‚úÖ admin-dashboard/ (Dashboard administrateur)"
    echo -e "  ‚úÖ test-all-features.html (Interface de test)"
    
    echo ""
    echo -e "${GREEN}‚öôÔ∏è Backend & API :${NC}"
    echo -e "  ‚úÖ backend/ (API Node.js + Prisma)"
    echo -e "  ‚úÖ shared/ (Composants partag√©s)"
    
    echo ""
    echo -e "${GREEN}üìñ Documentation :${NC}"
    echo -e "  ‚úÖ docs/ (Documentation principale)"
    echo -e "  ‚úÖ README.md & README_LICENCE_PRO.md"
    
    echo ""
    echo -e "${GREEN}üîß Scripts & Configuration :${NC}"
    echo -e "  ‚úÖ scripts/ (Scripts principaux)"
    echo -e "  ‚úÖ docker-compose.yml"
    echo -e "  ‚úÖ .gitignore (configur√© pour licence pro)"
    
    echo ""
}

prepare_readme() {
    echo -e "${BLUE}üìù Pr√©paration du README pour licence pro...${NC}"
    
    cd "$PROJECT_ROOT"
    
    # Sauvegarder le README original s'il n'existe pas d√©j√†
    if [ ! -f "README_ORIGINAL.md" ] && [ -f "README.md" ]; then
        cp "README.md" "README_ORIGINAL.md"
        echo -e "${GREEN}‚úÖ README original sauvegard√©${NC}"
    fi
    
    # Remplacer par la version licence pro
    if [ -f "README_LICENCE_PRO.md" ]; then
        cp "README_LICENCE_PRO.md" "README.md"
        echo -e "${GREEN}‚úÖ README licence pro activ√©${NC}"
    fi
    
    echo ""
}

check_gitignore() {
    echo -e "${BLUE}üîç V√©rification du .gitignore...${NC}"
    
    cd "$PROJECT_ROOT"
    
    # V√©rifier que les exclusions sont bien pr√©sentes
    if grep -q "FrontBPMF/" .gitignore && grep -q "BackBPMF/" .gitignore && grep -q "search-engine/" .gitignore; then
        echo -e "${GREEN}‚úÖ .gitignore correctement configur√© pour licence pro${NC}"
    else
        echo -e "${RED}‚ùå .gitignore non configur√© - relancez la configuration${NC}"
        exit 1
    fi
    
    echo ""
}

preview_git_status() {
    echo -e "${BLUE}üëÄ Aper√ßu des fichiers qui seront versionn√©s :${NC}"
    echo ""
    
    cd "$PROJECT_ROOT"
    
    # Simulation de git add pour voir ce qui sera inclus
    git add -n . 2>/dev/null | head -20
    
    if [ $(git add -n . 2>/dev/null | wc -l) -gt 20 ]; then
        echo "... et $(git add -n . 2>/dev/null | wc -l | awk '{print $1-20}') fichiers suppl√©mentaires"
    fi
    
    echo ""
    echo -e "${YELLOW}üìä Statistiques :${NC}"
    local total_files=$(git add -n . 2>/dev/null | wc -l)
    echo -e "  üìÅ Fichiers total √† versionner : ${GREEN}$total_files${NC}"
    echo ""
}

git_commands_help() {
    echo -e "${PURPLE}üöÄ Commandes Git suivantes recommand√©es :${NC}"
    echo ""
    
    echo -e "${WHITE}1. Ajouter tous les fichiers :${NC}"
    echo -e "   ${BLUE}git add .${NC}"
    echo ""
    
    echo -e "${WHITE}2. Premier commit :${NC}"
    echo -e "   ${BLUE}git commit -m \"üéì Initial commit - Syst√®me de licences (Licence Pro)\"${NC}"
    echo ""
    
    echo -e "${WHITE}3. Ajouter le remote (remplacez par votre URL) :${NC}"
    echo -e "   ${BLUE}git remote add origin https://github.com/votre-utilisateur/votre-repo.git${NC}"
    echo ""
    
    echo -e "${WHITE}4. Pousser vers GitHub :${NC}"
    echo -e "   ${BLUE}git branch -M main${NC}"
    echo -e "   ${BLUE}git push -u origin main${NC}"
    echo ""
}

restore_original() {
    echo -e "${YELLOW}üîÑ Restoration du README original...${NC}"
    
    cd "$PROJECT_ROOT"
    
    if [ -f "README_ORIGINAL.md" ]; then
        cp "README_ORIGINAL.md" "README.md"
        echo -e "${GREEN}‚úÖ README original restaur√©${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Pas de README original trouv√©${NC}"
    fi
}

# Menu principal
show_menu() {
    echo -e "${WHITE}Que souhaitez-vous faire ?${NC}"
    echo ""
    echo -e "${GREEN}1.${NC} Pr√©parer pour Git (recommand√©)"
    echo -e "${GREEN}2.${NC} Voir le contenu exclu"  
    echo -e "${GREEN}3.${NC} Voir le contenu inclus"
    echo -e "${GREEN}4.${NC} Aper√ßu Git status"
    echo -e "${GREEN}5.${NC} Voir les commandes Git"
    echo -e "${GREEN}6.${NC} Restaurer README original"
    echo -e "${RED}q.${NC} Quitter"
    echo ""
    
    read -p "Votre choix : " choice
    
    case $choice in
        1)
            echo ""
            check_git_status
            prepare_readme
            check_gitignore
            show_excluded_content
            show_included_content
            preview_git_status
            git_commands_help
            ;;
        2)
            echo ""
            show_excluded_content
            ;;
        3)
            echo ""
            show_included_content
            ;;
        4)
            echo ""
            preview_git_status
            ;;
        5)
            echo ""
            git_commands_help
            ;;
        6)
            echo ""
            restore_original
            ;;
        q|Q)
            echo -e "${GREEN}üëã Au revoir !${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Choix invalide${NC}"
            echo ""
            show_menu
            ;;
    esac
}

# Ex√©cution principale
show_header
show_menu

echo ""
echo -e "${CYAN}üìÅ Votre projet licence pro est pr√™t pour Git !${NC}"
echo -e "${YELLOW}üí° N'oubliez pas de cr√©er votre repository sur GitHub avant de pousser${NC}"
