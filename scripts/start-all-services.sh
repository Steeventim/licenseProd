#!/bin/bash

# ========================================
# SCRIPT DE D√âMARRAGE UNIFI√â - √âCOSYST√àME COMPLET
# Version 3.0 - Tous les services int√©gr√©s
# ========================================

echo "üöÄ D√©marrage de l'√©cosyst√®me complet de gestion de licences..."
echo ""

# Variables globales
WORKSPACE_DIR="/home/tims/Dev/Licenses_prod"
LOGS_DIR="$WORKSPACE_DIR/logs"
FAILED_SERVICES=()
STARTED_SERVICES=()

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage color√©
print_status() {
    local status=$1
    local message=$2
    case $status in
        "success") echo -e "${GREEN}‚úÖ $message${NC}" ;;
        "error") echo -e "${RED}‚ùå $message${NC}" ;;
        "warning") echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}" ;;
        "info") echo -e "${BLUE}‚ÑπÔ∏è  $message${NC}" ;;
        *) echo "$message" ;;
    esac
}

# Fonction pour v√©rifier si un port est libre
check_port() {
    local port=$1
    local service_name=$2
    if netstat -tuln | grep -q ":$port "; then
        print_status "warning" "Port $port d√©j√† utilis√© par $service_name"
        return 1
    fi
    return 0
}

# Fonction pour attendre qu'un service soit pr√™t
wait_for_service() {
    local port=$1
    local service_name=$2
    local max_attempts=30
    local attempt=0
    
    echo "   Attente du d√©marrage de $service_name sur le port $port..."
    while [ $attempt -lt $max_attempts ]; do
        if netstat -tuln | grep -q ":$port "; then
            print_status "success" "$service_name d√©marr√© avec succ√®s sur le port $port"
            return 0
        fi
        sleep 1
        ((attempt++))
    done
    
    print_status "error" "Timeout: $service_name n'a pas d√©marr√© sur le port $port"
    return 1
}

# Fonction principale pour d√©marrer un service
start_service() {
    local service_name=$1
    local service_dir=$2
    local port=$3
    local start_command=$4
    local description=$5
    
    echo ""
    echo "üîÑ D√©marrage de $service_name..."
    print_status "info" "$description"
    
    # V√©rifier si le service est d√©j√† actif
    if netstat -tuln | grep -q ":$port "; then
        print_status "warning" "$service_name d√©j√† actif sur le port $port"
        STARTED_SERVICES+=("$service_name:$port:ALREADY_RUNNING")
        return 0
    fi
    
    # V√©rifier que le dossier existe
    if [ ! -d "$service_dir" ]; then
        print_status "error" "Dossier $service_dir introuvable"
        FAILED_SERVICES+=("$service_name:DIRECTORY_NOT_FOUND")
        return 1
    fi
    
    # Cr√©er le dossier logs s'il n'existe pas
    mkdir -p "$LOGS_DIR"
    
    local log_file="$LOGS_DIR/${service_name}.log"
    local pid_file="$LOGS_DIR/${service_name}.pid"
    
    # Aller dans le dossier du service
    cd "$service_dir"
    
    # V√©rifier package.json
    if [ ! -f "package.json" ]; then
        print_status "error" "package.json non trouv√© dans $service_dir"
        FAILED_SERVICES+=("$service_name:NO_PACKAGE_JSON")
        return 1
    fi
    
    # Installer les d√©pendances si n√©cessaire
    if [ ! -d "node_modules" ]; then
        echo "   üì¶ Installation des d√©pendances..."
        npm install --silent
    fi
    
    # D√©marrer le service
    if [[ $start_command == *"PORT="* ]]; then
        # Commande avec PORT sp√©cifique
        nohup bash -c "$start_command" > "$log_file" 2>&1 &
    else
        # Commande normale avec export PORT
        export PORT=$port
        nohup $start_command > "$log_file" 2>&1 &
    fi
    
    local pid=$!
    echo $pid > "$pid_file"
    
    echo "   PID: $pid"
    echo "   Log: $log_file"
    
    # Attendre que le service d√©marre
    if wait_for_service $port "$service_name"; then
        STARTED_SERVICES+=("$service_name:$port:STARTED")
        return 0
    else
        FAILED_SERVICES+=("$service_name:STARTUP_FAILED")
        return 1
    fi
}

# V√©rification des pr√©requis
echo "üîç V√©rification des pr√©requis..."

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    print_status "error" "Node.js n'est pas install√©"
    exit 1
fi

# V√©rifier npm
if ! command -v npm &> /dev/null; then
    print_status "error" "npm n'est pas install√©"
    exit 1
fi

echo "   ‚úÖ Node.js $(node --version)"
echo "   ‚úÖ npm $(npm --version)"

# Aller dans le dossier de travail
cd "$WORKSPACE_DIR"

echo ""
echo "üìã D√âMARRAGE DES SERVICES DE L'√âCOSYST√àME..."
echo "============================================="
# ==========================================
# 1. BACKEND API - Syst√®me de gestion des licences
# ==========================================
start_service "Backend-API" \
    "$WORKSPACE_DIR/backend" \
    "3001" \
    "npm run dev" \
    "API de gestion des licences et authentification"

# ==========================================
# 2. ADMIN DASHBOARD - Interface d'administration
# ==========================================
start_service "Admin-Dashboard" \
    "$WORKSPACE_DIR/admin-dashboard" \
    "8080" \
    "npm run dev" \
    "Interface d'administration avec authentification"

# ==========================================
# 3. FRONTEND CLIENT - Interface utilisateur principale
# ==========================================
start_service "Frontend-Client" \
    "$WORKSPACE_DIR/frontend" \
    "5173" \
    "npm run dev" \
    "Interface client moderne avec modules int√©gr√©s"

# ==========================================
# 4. SEARCH ENGINE - Moteur de recherche intelligent
# ==========================================
start_service "SearchEngine" \
    "$WORKSPACE_DIR/search-engine" \
    "3000" \
    "npm run dev" \
    "Moteur de recherche avec IA et analyse de documents"

# ==========================================
# 5. BACKBPMF - Syst√®me de gestion documentaire DGI
# ==========================================
start_service "BackBPMF" \
    "$WORKSPACE_DIR/BackBPMF" \
    "3003" \
    "npm run dev" \
    "Backend de gestion documentaire pour workflow DGI"

# Alternative pour BackBPMF si le port 3003 est occup√©
if [[ " ${FAILED_SERVICES[@]} " =~ " BackBPMF" ]]; then
    echo "üîÑ Tentative de d√©marrage de BackBPMF sur le port 3004..."
    start_service "BackBPMF-Alt" \
        "$WORKSPACE_DIR/BackBPMF" \
        "3004" \
        "PORT=3004 npm run dev" \
        "Backend documentaire DGI (port alternatif)"
fi

# ==========================================
# 6. FRONTBPMF - Interface BPM
# ==========================================
start_service "FrontBPMF" \
    "$WORKSPACE_DIR/FrontBPMF" \
    "5174" \
    "npm run dev" \
    "Interface Business Process Management"

# ==========================================
# ATTENTE ET V√âRIFICATION
# ==========================================
echo ""
echo "‚è≥ Attente de la stabilisation des services..."
sleep 5

echo ""
echo "üìä RAPPORT DE D√âMARRAGE"
echo "======================="

# Affichage des services d√©marr√©s avec succ√®s
if [ ${#STARTED_SERVICES[@]} -gt 0 ]; then
    echo ""
    print_status "success" "SERVICES D√âMARR√âS AVEC SUCC√àS :"
    for service in "${STARTED_SERVICES[@]}"; do
        IFS=':' read -r name port status <<< "$service"
        if [ "$status" = "ALREADY_RUNNING" ]; then
            echo "   ‚úÖ $name - http://localhost:$port (d√©j√† actif)"
        else
            echo "   ‚úÖ $name - http://localhost:$port"
        fi
    done
fi

# Affichage des services en √©chec
if [ ${#FAILED_SERVICES[@]} -gt 0 ]; then
    echo ""
    print_status "error" "SERVICES EN √âCHEC :"
    for service in "${FAILED_SERVICES[@]}"; do
        echo "   ‚ùå $service"
    done
fi

# V√©rification finale des ports
echo ""
echo "üîç V√âRIFICATION FINALE DES PORTS :"
echo "-----------------------------------"

declare -A expected_services=(
    ["3001"]="Backend API (Licences)"
    ["3000"]="Search Engine (IA)"
    ["3003"]="BackBPMF (Documents DGI)"
    ["3004"]="BackBPMF Alt (Documents DGI)"
    ["5173"]="Frontend Client (Interface)"
    ["5174"]="FrontBPMF (BPM)"
    ["8080"]="Admin Dashboard"
)

for port in "${!expected_services[@]}"; do
    if netstat -tuln | grep -q ":$port "; then
        print_status "success" "${expected_services[$port]} - http://localhost:$port"
    else
        print_status "error" "${expected_services[$port]} - Service non disponible"
    fi
done

# ==========================================
# INFORMATIONS FINALES
# ==========================================
echo ""
echo "üéØ MODES DE D√âMARRAGE DISPONIBLES"
echo "=================================="
echo ""
echo "üì± ACC√àS COMPLET (tous services) :"
echo "   ‚îî‚îÄ Interface Client: http://localhost:5173"
echo "      ‚îú‚îÄ Tableaux de bord et analytics"
echo "      ‚îú‚îÄ Gestion documentaire (BackBPMF)"
echo "      ‚îú‚îÄ Recherche intelligente (IA)"
echo "      ‚îú‚îÄ Interface BPM"
echo "      ‚îî‚îÄ Export et rapports"
echo ""
echo "üîß ADMINISTRATION :"
echo "   ‚îî‚îÄ Admin Dashboard: http://localhost:8080"
echo "      ‚îú‚îÄ Login: Faubell7 / Z04y627$"
echo "      ‚îú‚îÄ Gestion des clients"
echo "      ‚îú‚îÄ Gestion des licences"
echo "      ‚îî‚îÄ Statistiques syst√®me"
echo ""
echo "üîó SERVICES DIRECTS :"
echo "   ‚îú‚îÄ API Backend: http://localhost:3001"
echo "   ‚îú‚îÄ Search Engine: http://localhost:3000"
echo "   ‚îú‚îÄ Documents DGI: http://localhost:3003"
echo "   ‚îî‚îÄ Interface BPM: http://localhost:5174"
echo ""

# D√©tection automatique de l'environnement
active_services=$(netstat -tuln | grep -E ':(3001|3000|3003|5173|5174|8080)' | wc -l)

if [ $active_services -ge 4 ]; then
    echo "üéâ √âCOSYST√àME OP√âRATIONNEL !"
    echo ""
    echo "üîë VALIDATION DE LICENCE :"
    echo "   Cl√© de test : LIC-MCDMX42E-00F4248D-7C3B859A-F12E63D8"
    echo "   Fonctionnalit√©s : basic, bpm, search, export, analytics, reports, documents"
    echo ""
    echo "üìã COMMANDES UTILES :"
    echo "   ‚Ä¢ Voir les logs : tail -f logs/[service].log"
    echo "   ‚Ä¢ Arr√™ter tous : ./stop-all-services.sh"
    echo "   ‚Ä¢ Test complet : http://localhost:5173/test-license-interface.html"
    echo "   ‚Ä¢ Test avanc√© : open test-all-features.html"
    echo ""
    echo "üìß SUPPORT : Tous les services sont maintenant accessibles avec validation de licence !"
else
    echo "‚ö†Ô∏è  D√âMARRAGE PARTIEL"
    echo "   Certains services ne sont pas disponibles."
    echo "   V√©rifiez les logs dans le dossier ./logs/"
    echo ""
    echo "üîß D√âPANNAGE :"
    echo "   ‚Ä¢ Relancer : ./start-all-services.sh"
    echo "   ‚Ä¢ Arr√™ter d'abord : ./stop-all-services.sh"
    echo "   ‚Ä¢ V√©rifier les ports : netstat -tuln | grep -E ':(3001|3000|3003|5173|5174|8080)'"
fi

echo ""
echo "üí´ D√©marrage de l'√©cosyst√®me termin√© - $(date)"
